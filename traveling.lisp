(defun traveling (n tm x y)
  (let ((can  t)
        (dt   0)
        (dist 0))
    (dotimes (i n)
      (setf dt   (- (aref tm (+ i 1)) (aref tm i)))
      (setf dist (+ (abs (- (aref x (+ i 1)) (aref x i)))
                    (abs (- (aref y (+ i 1)) (aref y i)))))
      (if (< dt dist)
          (setf can nil))
      (if (not (= (rem dist 2) (rem dt 2)))
          (setf can nil)))
    (if (eq can t)
        "Yes"
        "No")))

(defun create-data ()
  (let ((n  (read))
        (tm (make-array '(110000) :initial-element 0))
        (x  (make-array '(110000) :initial-element 0))
        (y  (make-array '(110000) :initial-element 0)))
    (dotimes (i n)
      (setf (aref tm (1+ i)) (read))
      (setf (aref x (1+ i))  (read))
      (setf (aref y (1+ i))  (read)))
    (values n tm x y)))

(multiple-value-bind (n tm x y) (create-data)
  (format t "~A~%" (traveling n tm x y)))
